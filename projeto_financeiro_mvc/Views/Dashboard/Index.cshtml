@using System.Text.Json
@model projeto_financeiro_mvc.ViewModels.MovimentosFinanceirosViewModel
@{
    ViewData["Title"] = "Dashboard";
}

<h1 class="d-flex justify-content-center text-primary fw-bold mt-2" id="titulo">@ViewData["Title"]</h1>

<div class="d-flex flex-wrap w-100 flex-row">
    <div class="d-flex p-4 text-start" style="max-height: 220px; flex: 1 1 0;" data-bs-toggle="tooltip" data-bs-placement="bottom" title="Soma de todas as receitas do mês">
        <div class="card p-2 w-100 border-success rounded rounded-3">
            <div class="card-body">
                <div class="d-flex justify-content-between">
                    <h5 class="card-title fs-5 text-dark">Receita</h5>
                    <i class="bi bi-arrow-up text-success fs-5"></i>
                </div>
                
                @{
                    var lancamentosReceita = Model?.Lancamentos
                        .Where(l => l.Tipo == TipoLancamento.Receita && l.Pago == true)
                        .Select(l => new { l.Tipo, l.Data, l.Valor })
                        .ToList();

                    var recorrentesReceita = Model?.Recorrentes
                        .Where(r => r.Tipo == TipoLancamento.Receita && r.Pago == true)
                        .Select(r => new { r.Tipo, r.Data, r.Valor })
                        .ToList();

                    var listaReceitas = lancamentosReceita.Concat(recorrentesReceita);

                    double receita = 0;

                    var dataAtual = DateTime.Now;

                    foreach(var itemLista in listaReceitas)
                    {
                        receita += itemLista.Valor;
                    }
                    
                    var mesAnterior = DateTime.Now.Month - 1;

                    var lancMesAnterior = Model?.Lancamentos
                        .Where(l => l.Data.Month == mesAnterior && l.Tipo == TipoLancamento.Receita && l.Pago == true)
                        .Select(l => new { l.Data, l.Tipo, l.Valor})
                        .ToList();
                    
                    var recMesAnterior = Model?.Recorrentes
                        .Where(r => r.Data.Month == mesAnterior && r.Tipo == TipoLancamento.Receita && r.Pago == true)
                        .Select(r => new { r.Data, r.Tipo, r.Valor})
                        .ToList();
                    
                    var receitaMesAnterior = lancMesAnterior.Concat(recMesAnterior);

                    var receitaMesAtual = listaReceitas.Where(l => l.Data.Month == dataAtual.Month).ToList();

                    double valorReceitaMesAnterior = receitaMesAnterior.Sum(x => x.Valor);
                    double valorReceitaMesAtual = receitaMesAtual.Sum(x => x.Valor);

                    double comparativo = 0;

                    if (valorReceitaMesAnterior > 0)
                    {
                        comparativo = (valorReceitaMesAtual / valorReceitaMesAnterior)* 100;
                    }

                    <p class="card-text fw-medium fs-3 mt-4 text-dark valor-card">R$@valorReceitaMesAtual.ToString("N2")</p>
                    <p class="card-text fw-light text-secondary texto-card">@comparativo.ToString("N2")% - Comparado ao mês anterior</p>
                }
            </div>
        </div>
    </div>
    <div class="d-flex p-4 text-start" style="max-height: 220px; flex: 1 1 0;" data-bs-toggle="tooltip" data-bs-placement="bottom" title="Soma de todas as despesas do mês">
        <div class="card p-2 w-100 border-danger rounded rounded-3">
            <div class="card-body p-3 w-100">
                <div class="d-flex justify-content-between">
                    <h5 class="card-title fs-5 text-dark">Despesas</h5>
                    <i class="bi bi-arrow-down text-danger fs-5"></i>
                </div>
                @{
                    var lancamentos = Model?.Lancamentos
                        .Where(l => l.Tipo == TipoLancamento.Despesa && l.Pago == true && l.Categoria.Descricao != "SaldoInicial")
                        .Select(l => new { l.Tipo, l.Data, l.Valor })
                        .ToList();

                    var recorrentes = Model?.Recorrentes
                        .Where(r => r.Tipo == TipoLancamento.Despesa && r.Pago == true)
                        .Select(l => new { l.Tipo, l.Data, l.Valor })
                        .ToList();

                    var listaDespesas = lancamentos.Concat(recorrentes);

                    double despesa = 0;

                    foreach(var itemLista in listaDespesas)
                    {
                        despesa += itemLista.Valor;
                    }

                    var lancDespesaMesAnterior = Model?.Lancamentos
                        .Where(l => l.Data.Month == mesAnterior && l.Tipo == TipoLancamento.Despesa && l.Pago == true && l.Categoria.Descricao != "SaldoInicial")
                        .Select(l => new { l.Data, l.Tipo, l.Valor })
                        .ToList();
                    
                    var recDespesaMesAnterior = Model?.Recorrentes
                        .Where(r => r.Data.Month == mesAnterior && r.Tipo == TipoLancamento.Despesa && r.Pago == true)
                        .Select(r => new { r.Data, r.Tipo, r.Valor })
                        .ToList();
                    
                    var despesasMesAnterior = lancDespesaMesAnterior.Concat(recDespesaMesAnterior);
                    var despesasMesAtual = listaDespesas.Where(d => d.Data.Month == dataAtual.Month);

                    double valorDespesasMesAnterior = despesasMesAnterior.Sum(x => x.Valor);
                    double valorDespesasMesAtual = despesasMesAtual.Sum(x => x.Valor);

                    if (valorDespesasMesAnterior > 0)
                    {
                        comparativo = (valorDespesasMesAtual / valorDespesasMesAnterior) *  100;
                    }

                    <p class="card-text fw-medium fs-3 mt-4 text-dark valor-card">R$@despesa.ToString("N2")</p>
                    <p class="card-text fw-light text-secondary texto-card">@comparativo.ToString("N2")% - Comparado ao mês anterior</p>
                }
            </div>
        </div>
    </div>
    <div class="d-flex p-4 text-start" style="max-height: 220px; flex: 1 1 0;" data-bs-toggle="tooltip" data-bs-placement="bottom" title="Soma de todos os saldos das suas contas">
        <div class="card p-2 w-100 border-info rounded rounded-3">
            <div class="card-body p-3 w-100">
                <div class="d-flex justify-content-between">
                    <h5 class="card-title fs-5 text-dark">Saldo Total</h5>
                    <i class="bi bi-cash-coin text-info fs-5"></i>
                </div>
                @if (Model != null)
                {
                    double saldoTotal = 0;

                    foreach (var contas in Model.Contas)
                    {
                        saldoTotal += contas.Saldo;
                    }
                    <p class="card-text fw-medium fs-3 mt-4 text-dark valor-card">R$@saldoTotal.ToString("N2")</p>
                    if (saldoTotal == 0)
                    {
                        <p class="card-text fw-light text-secondary texto-card">Saldo Zerado</p>
                    }
                    else if (saldoTotal < 0)
                    {
                        <p class="card-text fw-light text-secondary texto-card">Saldo Negativo</p>
                    }
                    else {
                        <p class="card-text fw-light text-secondary texto-card">Saldo Positivo</p>
                    }
                }
            </div>
        </div>
    </div>
    <div class="d-flex p-4 text-start" style="max-height: 220px; flex: 1 1 0;" data-bs-toggle="tooltip" data-bs-placement="bottom" title="Ainda não disponível!">
        <div class="card p-2 w-100 border-warning rounded rounded-3">
            <div class="card-body p-2 w-100">
                <div class="d-flex justify-content-between">
                    <h5 class="card-title fs-5 text-dark">Orçamento</h5>
                    <i class="bi bi-percent text-warning fs-5"></i>
                </div>
                <p class="card-text fw-medium fs-2 mt-4 text-warning">
                    0.0%
                </p>
                <div class="progress">
                    <div class="progress-bar bg-warning" role="progressbar" style="width: 25%;" aria-valuenow="25" aria-valuemin="0" aria-valuemax="100"></div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="d-flex w-100 mt-2 mb-4">
    <div class="container border border-2 w-50 mx-4 p-2 border-primary rounded rounded-3">
        <h5 class="title p-1 text-primary"><i class="bi bi-bullseye text-info fs-4 me-2"></i>Metas Financeiras</h5>

        <div class="container" id="list-ultLancamentos">
            <div class="mb-2">
                <h6 class="text-dark">Reserva de Emergência</h6>
                <div class="progress mb-1">
                    <div class="progress-bar bg-success" role="progressbar" style="width: 25%;" aria-valuenow="25" aria-valuemin="0" aria-valuemax="100"></div>
                </div>
                <span style="font-size: 14px; color: rgba(0, 0, 0, 0.856)">R$1000,00 de R$5000,00</span>
            </div>

            <div>
                <h6 class="text-dark">Sofá</h6>
                <div class="progress mb-1">
                    <div class="progress-bar bg-success" role="progressbar" style="width: 25%;" aria-valuenow="25" aria-valuemin="0" aria-valuemax="100"></div>
                </div>
                <span style="font-size: 14px; color: rgba(0, 0, 0, 0.856)">R$200,00 de R$2000,00</span>
            </div>
        </div>

    </div>

    <div class="container border border-2 w-50 mx-4 p-2 border-primary rounded rounded-3">
        <h5 class="title p-1 text-dark"><i class="bi bi-calendar me-2"></i>Próximos vencimentos</h5>

        <div class="container mt-2" id="list-ultLancamentos">
            @{
                var hoje = DateTime.Now;

                var lancamentosFiltrados = Model?.Lancamentos
                    .Where(l => l.Data.Month == hoje.Month && l.Data > hoje && l.Tipo == TipoLancamento.Despesa && l.Pago == false)
                    .ToList() ?? new List<LancamentoModel>();

                var recorrentesFiltrados = Model?.Recorrentes
                    .Where(r => r.Data.Month == hoje.Month && r.Data > hoje && r.Tipo == TipoLancamento.Despesa && r.Pago == false)
                    .ToList() ?? new List<RecorrenteModel>();

                var resultados = lancamentosFiltrados.Any() || recorrentesFiltrados.Any();

                if(!resultados)
                {
                    //QUANDO NÃO EXISTIR LANÇAMENTOS
                    <div class="d-flex align-items-center justify-content-center mt-4 p-2">
                        <h5 class="text-primary">Nenhum lançamento próximo do vencimento encontrado!</h5>
                    </div>
                }

                foreach (var lanc in lancamentosFiltrados)
                {
                    <div class="card rounded rounded-3 border-1 border-danger bg-danger bg-opacity-25 d-flex flex-row align-items-center justify-content-between text-center mb-2 mt-2">
                        <i class="bi bi-arrow-down text-danger ms-3 fs-5"></i>
                        <div class="d-flex flex-column flex-grow-1 p-0">
                            <h5 class="card-title text-dark fs-6">@lanc.Descricao</h5>
                            <span class="card-text text-dark-emphasis" style="font-size: 12px;">@lanc.Data.ToString("dd/MM/yyyy - hh:mm")</span>
                        </div>
                        <p class="text-danger fs-6 fw-bold mb-0 me-1"><i class="bi bi-dash"></i> R$@lanc.Valor</p>
                    </div>
                }
                foreach (var recorrente in recorrentesFiltrados)
                {
                    <div class="card rounded rounded-3 border-1 border-warning bg-warning bg-opacity-25 d-flex flex-row align-items-center justify-content-between text-center mb-2 mt-2">
                        <i class="bi bi-repeat ms-3 fs-4 text-warning"></i>
                        <div class="d-flex flex-column flex-grow-1 p-0">
                            <h5 class="card-title text-dark fs-6">@recorrente.Descricao</h5>
                            <span class="card-text text-dark-emphasis" style="font-size: 12px;">@recorrente.Data.ToString("dd/MM/yyyy - hh:mm")</span>
                        </div>
                        <p class="text-danger fs-6 fw-bold mb-0 me-1"><i class="bi bi-dash"></i> R$@recorrente.Valor</p>
                    </div>
                }
            }
        </div>
    </div>
</div>

<div class="d-flex w-100 mb-4">
    <div class="container border border-2 w-50 mx-4 p-2 border-primary rounded rounded-3">
        <h5 class="title p-1 text-primary">Gastos por Categoria</h5>
        <div class="d-flex p-4 text-start w-100">
            <div class="card p-3 w-100" style="max-height: min-content;">
                <div class="d-flex justify-content-between align-items-center">
                    <canvas id="graficoCategoria" width="400" style="max-width: auto;"></canvas>
                </div>
            </div>
        </div>
    </div>

    <div class="container border border-2 w-50 mx-4 p-2 border-primary rounded rounded-3">
        <h5 class="title p-1 text-primary">Balanço semanal</h5>
        <div class="d-flex p-4 text-start w-100">
            <div class="card p-3 w-100" style="max-height: min-content;">
                <div class="d-flex justify-content-between align-items-center">
                    <canvas id="balance" width="400" style="max-width: auto;"></canvas>
                </div>
            </div>
        </div>
    </div>
</div>

@{
    // Gráfico Gastos por Categoria
    var despesasLancamentos = Model.Lancamentos
        .Where(l => l.Tipo == TipoLancamento.Despesa && l.Pago == true)
        .Select(l => new { Categoria = l.Categoria.Descricao, Valor = l.Valor});
    
    var despesasRecorrentes = Model.Recorrentes
        .Where(r => r.Tipo == TipoLancamento.Despesa && r.Pago == true)
        .Select(r => new { Categoria = r.Categoria.Descricao, Valor = r.Valor});

    var despesas = despesasLancamentos.Concat(despesasRecorrentes);

    var gastosPorCategoria = despesas
        .GroupBy(l => l.Categoria)
        .Select(g => new {
            Categoria = g.Key,
            Total = g.Sum(x => x.Valor)
        })
        .ToList();

    var categoriasJson = JsonSerializer.Serialize(gastosPorCategoria.Select(g => g.Categoria));
    var totaisJson = JsonSerializer.Serialize(gastosPorCategoria.Select(g => g.Total));
}

<script>
    // Gráfico Balanço Semanal
    var dias = @Html.Raw(JsonSerializer.Serialize(Model.DiasSemana));
    var recebido = @Html.Raw(JsonSerializer.Serialize(Model.ReceitaSemanal));
    var pago = @Html.Raw(JsonSerializer.Serialize(Model.DespesaSemanal));

    window.onload = function () {
        const balancoSemanal = document.getElementById('balance');

        new Chart(balance, {
            type: 'bar',
            data: {
                labels: dias,
                datasets: [
                    {
                        label: 'Recebido',
                        data: recebido,
                        backgroundColor: 'green', 
                        borderWidth: 1
                    },
                    {
                        label: 'Pago',
                        data: pago,
                        backgroundColor: 'red', 
                        borderWidth: 1
                    }
                ]
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            stepSize: 50,
                            min: 0,
                            max: 150
                        }
                    }
                }
            }
        })

        const categorias = @Html.Raw(categoriasJson);
        const totais = @Html.Raw(totaisJson);

        const graficoCategoria = document.getElementById('graficoCategoria');

        new Chart(graficoCategoria, {
            type: 'bar',
            data: {
                labels: categorias,
                datasets: [
                    {
                        label: 'Total gasto (R$)',
                        data: totais,
                        backgroundColor: [
                            '#ff6384',
                            '#36a2eb',
                            '#ffcd56',
                            '#4bc0c0',
                            '#9966ff',
                            '#ff9f40'
                        ],
                        borderWidth: 1
                    }
                ]
            },
            options: {
                indexAxis: 'y', // <-- Isso inverte
                responsive: true,
                plugins: {
                    legend: { position: 'top' },
                    title: {
                        display: true,
                        text: 'Gastos por Categoria'
                    }
                },
                scales: {
                    x: { beginAtZero: true } // valores no eixo X
                }
            }
        });
    }
</script>